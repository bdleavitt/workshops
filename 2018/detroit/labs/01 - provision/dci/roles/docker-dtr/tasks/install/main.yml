---
- name: "Check if DTR is already running."
  shell: "docker container ls -q --filter name=dtr-registry-"
  register: _already_running

- name: "Set is_already_running fact."
  set_fact:
    already_running: "{{ _already_running.stdout_lines | length > 0 }}"
    docker_primary_ucp_ip_address: "{{ hostvars[groups['linux-ucp-manager-primary'][0]]['ansible_host'] }}"

- name: "Install DTR (version: {{ docker_dtr_version }})."
  when: not already_running
  block:
  - name: "Pull DTR (version: {{ docker_dtr_version }})."
    shell: >
      docker image pull
      "{{ docker_dtr_image_repository }}/dtr:{{ docker_dtr_version }}"
    register: pulled
    retries: 10
    until: pulled is succeeded
    when: not enable_offline_install

  - name: "Import DTR images."
    when: enable_offline_install
    block:
      - name: "Copy tarball."
        copy:
          src: "{{ docker_dtr_tarball }}"
          dest: "/tmp/{{ docker_dtr_tarball | basename }}"

      - name: "Load tarball."
        shell: "docker load < /tmp/{{ docker_dtr_tarball | basename }}"

  - name: "Check for certificate file (at '{{ docker_dtr_cert_file }}')."
    delegate_to: localhost
    stat:
      path: "{{ docker_dtr_cert_file }}"
    become: no
    register: cert_stat

  - name: "Check for key file (at '{{ docker_dtr_key_file }}')."
    delegate_to: localhost
    stat:
      path: "{{ docker_dtr_key_file }}"
    become: no
    register: key_stat

  - name: "Check for CA certificate file (at '{{ docker_dtr_ca_file }}')."
    delegate_to: localhost
    stat:
      path: "{{ docker_dtr_ca_file }}"
    become: no
    register: ca_stat

  - name: "sanity check"
    fail:
      msg: "Certificate file '{{ docker_dtr_cert_file }}' exists, but key file '{{ docker_dtr_key_file }}' does not - both must exist if one is provided."
    when: cert_stat.stat.exists == true and key_stat.stat.exists == false

  - name: "sanity check"
    fail:
      msg: "Key file '{{ docker_dtr_key_file }}' exists, but certificate file '{{ docker_dtr_cert_file }}' does not - both must exist if one is provided."
    when: key_stat.stat.exists == true and cert_stat.stat.exists == false

  - name: "Import certificates."
    when: cert_stat.stat.exists == true or ca_stat.stat.exists == true or key_stat.stat.exists == true
    block:
    # Start block (certificates exist).
    - name: "Create volume for certificates."
      shell: "docker volume create dtr-controller-server-certs"
      register: volume_created

    - name: "Get volume path."
      shell: "docker volume inspect dtr-controller-server-certs --format {% raw %}'{{ .Mountpoint }}'{% endraw %}"
      register: certificates_volume
      when: volume_created is succeeded

    - name: "Copy certificate file."
      copy:
        src: "{{ docker_dtr_cert_file }}"
        dest: "{{ certificates_volume.stdout_lines[0] }}/cert.pem"
      when: volume_created is succeeded and cert_stat.stat.exists == true

    - name: "Copy CA certificate file."
      copy:
        src: "{{ docker_dtr_ca_file }}"
        dest: "{{ certificates_volume.stdout_lines[0] }}/ca.pem"
      when: volume_created is succeeded and ca_stat.stat.exists == true

    - name: "Copy key file."
      copy:
        src: "{{ docker_dtr_key_file }}"
        dest: "{{ certificates_volume.stdout_lines[0] }}/key.pem"
      when: volume_created is succeeded and key_stat.stat.exists == true
    # End block (certificates exist).

  - name: "Pull DTR container"
    shell: >
      docker pull  {{ docker_dtr_image_repository }}/dtr:{{ docker_dtr_version }}

  - name: "Start installing DTR"
    shell: >
      docker run
      -d
      --name dtr-install
      {{ docker_dtr_image_repository }}/dtr:{{ docker_dtr_version }}
      install
      --replica-https-port "{{ docker_dtr_https_port }}"
      --replica-http-port "{{ docker_dtr_http_port }}"
      --ucp-url "{{ docker_primary_ucp_ip_address }}"
      --ucp-node "{{ ansible_nodename }}"
      --dtr-external-url "{{ docker_dtr_lb }}"
      --ucp-username "{{ docker_ucp_username }}"
      --ucp-password "{{ docker_ucp_admin_password }}"
      --ucp-insecure-tls
      --replica-id "{{ docker_dtr_replica_id | default('') }}"
      {% if docker_dtr_install_args  != "" %}
      "{{ docker_dtr_install_args }}"
      {% endif %}
    register: dtr_install_container

  - name: "Wait until DTR install finishes"
    shell: >
      docker inspect
      {{ dtr_install_container.stdout_lines[0] }}
    register: dtr_install_inspect
    retries: 10
    delay: 60
    until:
      dtr_install_inspect.stdout | from_json | json_query('[0].State.Status') | string is not match('running')

  - name: "Check DTR install results"
    set_fact:
      dtr_install_status: dtr_install_inspect.stdout | from_json | json_query('[0].State.Status') | string
      dtr_install_exit_code: dtr_install_inspect.stdout | from_json | json_query('[0].State.ExitCode') | int
      dtr_installed_successfully: dtr_install_status == "exited" and dtr_install_exit_code == 0

  - include_tasks: "../get-running-replica-id.yml"

  - name: "Remove install container"
    shell: >
      docker container rm dtr-install
    when: dtr_installed_successfully

  - name: "Reconfigure DTR."
    when: docker_ucp_lb != docker_primary_ucp_ip_address and dtr_installed_successfully
    shell: >
      docker run
      --rm
      --name dtr-reconfigure
      {{ docker_dtr_image_repository }}/dtr:{{ docker_dtr_version }}
      reconfigure
      --replica-https-port "{{ docker_dtr_https_port }}"
      --replica-http-port "{{ docker_dtr_http_port }}"
      --dtr-external-url "{{ docker_dtr_lb }}"
      --ucp-url "{{ docker_ucp_lb }}"
      --ucp-username "{{ docker_ucp_username }}"
      --ucp-password "{{ docker_ucp_admin_password }}"
      --ucp-insecure-tls
      --existing-replica-id "{{ current_replica_id }}"
      {% if docker_dtr_install_args != "" %}
      "{{ docker_dtr_install_args }}"
      {% endif %}
    retries: 20
    delay: 10
    register: result
    until: result is succeeded
  # End 'not already_running' block.

# Always check DTR is accessible.
- name: "Wait for Docker DTR to be accessible on {{ docker_dtr_https_port }}."
  uri:
    url: "https://{{ docker_dtr_lb }}:{{ docker_dtr_https_port }}/_ping"
    force_basic_auth: True
    user: "{{ docker_ucp_username }}"
    password: "{{ docker_ucp_admin_password }}"
    validate_certs: False
  register: health
  until: health.status == 200
  retries: 20
  delay: 10

# Should we reconfigure every time?
- name: "Configure S3 storage backend"
  when: infra_stack == "aws"
  uri:
    method: "PUT"
    url: "https://{{ docker_dtr_lb }}/api/v0/admin/settings/registry/simple"
    status_code: 202
    force_basic_auth: True
    user: "{{ docker_ucp_username }}"
    password: "{{ docker_ucp_admin_password }}"
    validate_certs: False
    body_format: "json"
    body:
      {
        "storage": {
          "delete": {
            "enabled": true
            },
          "maintenance": {
            "readonly": {
              "enabled": false
            }
          },
          "s3": {
            "rootdirectory": "",
            "region": "{{ aws_region }}",
            "regionendpoint": "",
            "bucket": "{{ aws_dtr_storage_bucket }}",
            "secure": true
          }
        }
      }
  register: result
  until: result.status == 202
  retries: 10
  delay: 5

- name: "Configure object storage backend"
  when: infra_stack == "azure"
  uri:
    method: "PUT"
    url: "https://{{ docker_dtr_lb }}/api/v0/admin/settings/registry/simple"
    status_code: 202
    force_basic_auth: True
    user: "{{ docker_ucp_username }}"
    password: "{{ docker_ucp_admin_password }}"
    validate_certs: False
    body_format: "json"
    body:
      {
        "storage": {
          "delete": {
            "enabled": true
            },
          "maintenance": {
            "readonly": {
              "enabled": false
            }
          },
          "azure":{
            "accountname":"{{ azure_dtr_storage_account }}",
            "accountkey":"{{ azure_dtr_storage_key }}",
            "container":"dtrcontainer"
          }
        }
      }
  register: result
  until: result.status == 202
  retries: 10
  delay: 5

- name: "Configure object storage backend"
  when: infra_stack == "gcp"
  uri:
    method: "PUT"
    url: "https://{{ docker_dtr_lb }}/api/v0/admin/settings/registry/simple"
    status_code: 202
    force_basic_auth: True
    user: "{{ docker_ucp_username }}"
    password: "{{ docker_ucp_admin_password }}"
    validate_certs: False
    body_format: "json"
    body:
      {
        "storage": {
          "delete": {
            "enabled": true
            },
          "maintenance": {
            "readonly": {
              "enabled": false
            }
          },
          "gcs":{
            "bucket": "{{ dtr_storage_bucket }}",
            "credentials": "{{ lookup('file', gcp_creds_file) }}",
            "rootdirectory": ""
          }
        }
      }
  register: result
  until: result.status == 202
  retries: 10
  delay: 5

- include_tasks: "../get-running-replica-id.yml"
