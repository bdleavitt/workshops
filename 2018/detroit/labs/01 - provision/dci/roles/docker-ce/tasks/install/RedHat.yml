---
#
# Pre installation tasks.
#
- include_tasks: ".unix.pre.yml"

#
# OS Specific Updates
#
- include_tasks: "RedHat/{{ distribution }}.yml"
  when: ansible_distribution == distribution
  with_items:
    - "CentOS"
  loop_control:
    loop_var: distribution

#
# Install dependencies.
#
- name: "Add Docker CE URL to yum."
  copy:
    content: "{{ docker_ce_repository_url }}"
    dest: /etc/yum/vars/dockerurl

- name: "Install dependencies."
  yum:
    name: "{{ package }}"
    state: present
  with_items:
    - yum-utils
    - device-mapper-persistent-data
    - lvm2
    - "{% if infra_stack == \"aws\" %}chrony{% else %}ntp{% endif %}"
  loop_control:
    loop_var: package
  retries: 30
  delay: 10
  register: install_dependencies
  until: install_dependencies.rc == 0

#
# Chrony configuration on AWS
#
- name: "Configure chrony on AWS"
  when: infra_stack == "aws"
  lineinfile:
    line: "server 169.254.169.123 prefer iburst"
    path: "/etc/chrony.conf"

- name: "Remove existing pool config on AWS"
  when: infra_stack == "aws"
  lineinfile:
    regexp: "^pool.*"
    line: ""
    path: "/etc/chrony.conf"

- name: "Enable chrony service on AWS"
  when: infra_stack == "aws"
  service:
    name: "chronyd"
    enabled: "yes"
    state: "restarted"


- name: "Enable extras"
  shell:
    yum-config-manager --enable "{{ docker_ce_extras_name }}"

- name: "Enable options"
  shell:
    yum-config-manager --enable "rhel-7-server-optional-rpms"
#
# Add repository to yum.
#
- name: "Add Docker GPG key (from {{ docker_ce_repository_url }}/gpg }}."
  rpm_key:
    key: "{{ docker_ce_repository_url }}/gpg"
    state: present
  register: add_repository_key
  ignore_errors: true

- name: "Ensure curl is present (on older systems without SNI)."
  yum:
    name: curl
    state: latest
  when: add_repository_key is failed

- name: "Download GPG key (alternative for older systems without SNI)."
  shell: "curl -sSL {{ docker_ce_repository_url }}/gpg -o /tmp/storebits.gpg"
  args:
    warn: no
  when: add_repository_key is failed

- name: "Add Docker apt key (alternative for older systems without SNI)."
  shell: "rpm --import /tmp/storebits.gpg"
  args:
    warn: no
  when: add_repository_key is failed

- name: "Add Docker CE repository {{ docker_ce_release_channel }}-{{ docker_ce_version }}."
  yum_repository:
    name: "docker-ce.repo"
    description: "Add Docker CE repository"
    baseurl: "{{ docker_ce_repository_url }}/{{ ansible_distribution_major_version }}/x86_64/{{ docker_ce_repository }}"
    state: present

- name: "Install Docker CE (version: {{ docker_ce_version }})."
  yum:
    name: "{{ docker_ce_package }}"
    state: present
    disable_gpg_check: true
  retries: 30
  delay: 10
  register: install_docker_ce
  until: install_docker_ce is succeeded

- name: "Check for firewalld"
  shell: "systemctl is-active firewalld --quiet"
  register: firewalld_active_result
  failed_when: False

- name: "Set firewalld_active fact"
  set_fact:
    firewalld_active: "{{firewalld_active_result.rc == 0}}"

- name: "Restart polkitd before waiting for pkaction"
  systemd:
    name: polkit
    state: restarted
  when: firewalld_active

- name: "Wait for polkit to avoid race condition: BZ1436964"
  shell: pkaction --action-id=org.fedoraproject.FirewallD1.config.info
  register: pkaction
  retries: 10
  delay: 10
  until: pkaction.rc == 0
  ignore_errors: true
  when: firewalld_active


- name: "Open ports in firewalld for Docker CE"
  firewalld:
    port: "{{ item.port }}/{{ item.protocol }}"
    permanent: true
    state: enabled
  when: firewalld_active
  with_items:
    - name: "port for SSH"
      port: 22
      protocol: tcp
    - name: "port for the Docker Swarm manager. Used for backwards compatibility"
      port: 2376
      protocol: tcp
    - name: "port for communication between swarm nodes"
      port: 2377
      protocol: tcp
    - name: "port for overlay networking (udp)"
      port: 4789
      protocol: udp
    - name: "port for gossip-based clustering (tcp)"
      port: 7946
      protocol: tcp
    - name: "port for gossip-based clustering (udp)"
      port: 7946
      protocol: udp

- name: "Open ports in firewalld for Docker CE"
  firewalld:
    service: nfs
    permanent: true
    state: enabled
  when: firewalld_active

- name: "Allow other IP protocols in firewalld."
  when: firewalld_active
  firewalld:
    rich_rule: "{{ item.rule }}"
    permanent: true
    state: enabled
  loop:
    - name: "Encapsulating Security Payload (ESP) protocol"
      rule: "rule protocol value=esp accept"

- name: Restart Firewalld Service
  service:
    name: firewalld
    state: restarted
  when: firewalld_active

- name: Wait for firewalld to come back
  pause:
    seconds: 10
  when: firewalld_active

- name: Check the Firewall Port status
  shell:
    firewall-cmd --list-all
  when: firewalld_active
#
# Post installation tasks.
#

- include_tasks: ".unix.post.yml"
